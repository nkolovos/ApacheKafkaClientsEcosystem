---
version: '3'

networks:
  kafka:
    name: kafka

# volumes:
#   controller-data:
#     driver: local
#   broker1-data:
#     driver: local
#   broker2-data:
#     driver: local
#   broker3-data:
#     driver: local

services:

  controller:
    image: confluentinc/cp-kafka:7.4.1
    hostname: controller
    container_name: controller
    networks:
      - kafka
    ports:
      - "9090:9090"
      # - "9102:9102"
    # volumes:
    #  - source: controller-data
    #    target: /var/lib/kafka/data
    #    type: volume
    #  - source: controller-data
    #    target: /etc/kafka/secrets
    #    type: volume
    environment:
      # Unique ID for the Kafka node (controller in this case)
      KAFKA_NODE_ID: 0
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      # Port for JMX monitoring of Kafka
      KAFKA_JMX_PORT: 9102
      # Hostname for JMX monitoring of Kafka
      KAFKA_JMX_HOSTNAME: localhost
      # Process roles for the Kafka node (controller in this case)
      KAFKA_PROCESS_ROLES: 'controller'
      # Configuration for controller quorum voters
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@controller:9090'
      # Listeners configuration for the Kafka node (controller in this case)
      KAFKA_LISTENERS: 'CONTROLLER://controller:9090'
      # Inter-broker listener name configuration
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      # Controller listener names configuration
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      # Confluent Schema Registry URL
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # This is required when you are running with a single-node cluster. 
      # If you have three or more nodes, you can use the default.
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_LOG_DIRS: '/tmp/kraft-controller-logs'
      # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      # CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      # CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      # CONFLUENT_METRICS_ENABLE: 'true'
      # CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid"
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh

  broker1:
    # image: confluentinc/cp-server:7.4.1
    # image: confluentinc/confluent-local:7.4.1
    image: confluentinc/cp-kafka:7.4.1
    hostname: broker1
    container_name: broker1
    networks:
      - kafka
    depends_on:
      - controller
    ports:
      - "9091:9091"
      # - "9101:9101"
    # volumes:
    #  - source: broker1-data
    #    target: /var/lib/kafka/data
    #    type: volume
    #  - source: broker1-data
    #    target: /etc/kafka/secrets
    #    type: volume
    environment:
      # Unique ID for the Kafka node (broker1 in this case)
      KAFKA_NODE_ID: 1
      # CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      # Listener security protocol mapping
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      # Advertised listeners configuration for the Kafka node (broker1 in this case)
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker1:29092,PLAINTEXT_HOST://localhost:9091'
      # Port for JMX monitoring of Kafka
      KAFKA_JMX_PORT: 9101
      # Hostname for JMX monitoring of Kafka
      KAFKA_JMX_HOSTNAME: localhost
      # Process roles for the Kafka node (broker1 in this case)
      KAFKA_PROCESS_ROLES: 'broker'
      # Configuration for controller quorum voters
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@controller:9090'
      # Listeners configuration for the Kafka node (broker1 in this case)
      KAFKA_LISTENERS: 'PLAINTEXT://broker1:29092,PLAINTEXT_HOST://0.0.0.0:9091'
      # Inter-broker listener name configuration
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      # Controller listener names configuration
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      # Auto create topics enable/disable
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      # Confluent Schema Registry URL
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # This is required when you are running with a single-node cluster. 
      # If you have three or more nodes, you can use the default.
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      # CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      # CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      # CONFLUENT_METRICS_ENABLE: 'true'

  broker2:
    # image: confluentinc/cp-server:7.4.1
    # image: confluentinc/confluent-local:7.4.1
    image: confluentinc/cp-kafka:7.4.1
    hostname: broker2
    container_name: broker2
    networks:
      - kafka
    depends_on:
      - controller
      - broker1
    ports:
      - "9092:9092"
    # volumes:
    #  - source: broker2-data
    #    target: /var/lib/kafka/data
    #    type: volume
    #  - source: broker2-data
    #    target: /etc/kafka/secrets
    #    type: volume
    environment:
      # Unique ID for the Kafka node (broker2 in this case)
      KAFKA_NODE_ID: 2
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      # Listener security protocol mapping
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      # Advertised listeners configuration for the Kafka node (broker2 in this case)
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker2:29092,PLAINTEXT_HOST://localhost:9092'
      # Port for JMX monitoring of Kafka
      KAFKA_JMX_PORT: 9101
      # Hostname for JMX monitoring of Kafka
      KAFKA_JMX_HOSTNAME: localhost
      # Process roles for the Kafka node (broker2 in this case)
      KAFKA_PROCESS_ROLES: 'broker'
      # Configuration for controller quorum voters
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@controller:9090'
      # Listeners configuration for the Kafka node (broker2 in this case)
      KAFKA_LISTENERS: 'PLAINTEXT://broker2:29092,PLAINTEXT_HOST://0.0.0.0:9092'
      # Inter-broker listener name configuration
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      # Controller listener names configuration
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      # Auto create topics enable/disable
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      # Confluent Schema Registry URL
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # This is required when you are running with a single-node cluster. 
      # If you have three or more nodes, you can use the default.
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      # CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      # CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      # CONFLUENT_METRICS_ENABLE: 'true'
      # CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    
  broker3:
    # image: confluentinc/cp-server:7.4.1
    # image: confluentinc/confluent-local:7.4.1
    image: confluentinc/cp-kafka:7.4.1
    hostname: broker3
    container_name: broker3
    networks:
      - kafka
    depends_on:
      - controller
      - broker1
      - broker2
    ports:
      - "9093:9093"
    # volumes:
    #  - source: broker3-data
    #    target: /var/lib/kafka/data
    #    type: volume
    #  - source: broker3-data
    #    target: /etc/kafka/secrets
    #    type: volume
    environment:
      # Unique ID for the Kafka node (broker2 in this case)
      KAFKA_NODE_ID: 3
      # Replace CLUSTER_ID with a unique base64 UUID using "bin/kafka-storage.sh random-uuid" 
      # See https://docs.confluent.io/kafka/operations-tools/kafka-tools.html#kafka-storage-sh
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      # Listener security protocol mapping
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      # Advertised listeners configuration for the Kafka node (broker2 in this case)
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://broker3:29092,PLAINTEXT_HOST://localhost:9093'
      # Port for JMX monitoring of Kafka
      KAFKA_JMX_PORT: 9101
      # Hostname for JMX monitoring of Kafka
      KAFKA_JMX_HOSTNAME: localhost
      # Process roles for the Kafka node (broker3 in this case)
      KAFKA_PROCESS_ROLES: 'broker'
      # Configuration for controller quorum voters
      KAFKA_CONTROLLER_QUORUM_VOTERS: '0@controller:9090'
      # Listeners configuration for the Kafka node (broker3 in this case)
      KAFKA_LISTENERS: 'PLAINTEXT://broker3:29092,PLAINTEXT_HOST://0.0.0.0:9093'
      # Inter-broker listener name configuration
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      # Controller listener names configuration
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      # Auto create topics enable/disable
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
      # Confluent Schema Registry URL
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      # This is required when you are running with a single-node cluster. 
      # If you have three or more nodes, you can use the default.
      # KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
      # KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      # CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      # CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      # CONFLUENT_METRICS_ENABLE: 'true'
      # CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'


  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.1
    hostname: schema-registry
    container_name: schema-registry
    networks:
      - kafka
    depends_on:
      - controller
      - broker1
      - broker2
      - broker3
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      # A list of Kafka brokers to connect to. For example, PLAINTEXT://hostname:9092,SSL://hostname2:9092
      # The Kafka cluster containing the bootstrap servers specified in kafkastore.bootstrap.servers 
      # is used to coordinate Schema Registry instances (leader election), and store schema data. 
      # When Kafka security is enabled, kafkastore.bootstrap.servers is also used to 
      # specify security protocols that Schema Registry uses to connect to Kafka.
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker1:29092,broker2:29092,broker3:29092'
      # Comma-separated list of listeners that listen for API requests over either HTTP or HTTPS. 
      # If a listener uses HTTPS, the appropriate SSL configuration parameters need to be set as well.
      # Default: “http://0.0.0.0:8081
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      # The durable single partition topic that acts as the durable log for the data. 
      # This topic must be compacted to avoid losing data due to retention policy.
      # Default: "_schemas"
      # SCHEMA_REGISTRY_KAFKASTORE_TOPIC: _SchemasMetadata
      # The desired replication factor of the schema topic. 
      # The actual replication factor will be the smaller of this value and the number of live Kafka brokers.
      # SCHEMA_REGISTRY_KAFKASTORE_TOPIC_REPLICATION_FACTOR: 1

  # connect:
  #   image: kafka-connect-datagen
  #   hostname: connect
  #   container_name: connect
  #   depends_on:
  #     - broker
  #     - controller
  #     # - schema-registry
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     CONNECT_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONNECT_REST_ADVERTISED_HOST_NAME: connect
  #     CONNECT_GROUP_ID: compose-connect-group
  #     CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
  #     CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
  #     CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
  #     CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
  #     CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
  #     CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
  #     CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
  #     # CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
  #     # CLASSPATH required due to CC-2422
  #     CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-7.4.1.jar
  #     CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
  #     CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  #     CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
  #     CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

  # control-center:
  #   image: confluentinc/cp-enterprise-control-center:7.4.1
  #   hostname: control-center
  #   container_name: control-center
  #   depends_on:
  #     - broker
  #     - controller
  #     # - schema-registry
  #     # - connect
  #     # - ksqldb-server
  #   ports:
  #     - "9021:9021"
  #   environment:
  #     CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
  #     CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
  #     CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
  #     CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
  #     CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     CONTROL_CENTER_REPLICATION_FACTOR: 1
  #     CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
  #     CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
  #     CONFLUENT_METRICS_TOPIC_REPLICATION: 1
  #     PORT: 9021

  # ksqldb-server:
  #   image: confluentinc/cp-ksqldb-server:7.4.1
  #   hostname: ksqldb-server
  #   container_name: ksqldb-server
  #   depends_on:
  #     - broker
  #     - controller
  #     - connect
  #   ports:
  #     - "8088:8088"
  #   environment:
  #     KSQL_CONFIG_DIR: "/etc/ksql"
  #     KSQL_BOOTSTRAP_SERVERS: "broker:29092"
  #     KSQL_HOST_NAME: ksqldb-server
  #     KSQL_LISTENERS: "http://0.0.0.0:8088"
  #     KSQL_CACHE_MAX_BYTES_BUFFERING: 0
  #     KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
  #     KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
  #     KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
  #     KSQL_KSQL_CONNECT_URL: "http://connect:8083"
  #     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_REPLICATION_FACTOR: 1
  #     KSQL_KSQL_LOGGING_PROCESSING_TOPIC_AUTO_CREATE: 'true'
  #     KSQL_KSQL_LOGGING_PROCESSING_STREAM_AUTO_CREATE: 'true'

  # ksqldb-cli:
  #   image: confluentinc/cp-ksqldb-cli:7.4.1
  #   container_name: ksqldb-cli
  #   depends_on:
  #     - broker
  #     - controller
  #     - connect
  #     - ksqldb-server
  #   entrypoint: /bin/sh
  #   tty: true

  # ksql-datagen:
  #   image: confluentinc/ksqldb-examples:7.4.1
  #   hostname: ksql-datagen
  #   container_name: ksql-datagen
  #   depends_on:
  #     - ksqldb-server
  #     - broker
  #     - controller
  #     - schema-registry
  #     - connect
  #   command: "bash -c 'echo Waiting for Kafka to be ready... && \
  #                      cub kafka-ready -b broker:29092 1 40 && \
  #                      echo Waiting for Confluent Schema Registry to be ready... && \
  #                      cub sr-ready schema-registry 8081 40 && \
  #                      echo Waiting a few seconds for topic creation to finish... && \
  #                      sleep 11 && \
  #                      tail -f /dev/null'"
  #   environment:
  #     KSQL_CONFIG_DIR: "/etc/ksql"
  #     STREAMS_BOOTSTRAP_SERVERS: broker:29092
  #     STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
  #     STREAMS_SCHEMA_REGISTRY_PORT: 8081

  # rest-proxy:
  #   image: confluentinc/cp-kafka-rest:7.4.1
  #   depends_on:
  #     - broker
  #     - controller
  #     - schema-registry
  #   ports:
  #     - 8082:8082
  #   hostname: rest-proxy
  #   container_name: rest-proxy
  #   environment:
  #     KAFKA_REST_HOST_NAME: rest-proxy
  #     KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
  #     KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
  #     KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
